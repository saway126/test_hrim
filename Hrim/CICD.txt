Ci란 Continuous Integration의 약자로 지속적 통합을 뜻 합니다. 코드를 지속적으로 합하는 것을 CI라고 합니다.

CD는 Continuous Deployment의 약자로 지속적 배포를 뜻 합니다. 통합된 코드를 고객에게 배포하는 것을 CD라 합니다.


CI/CD 파이프라인의 기본적인 구조
소스 코드 커밋
개발자는 기능 개발을 완료하면 중앙의 코드 저장소(예: GitHub, GitLab)에 변경사항을 커밋합니다. 이 때, 특정 브랜치 전략(예: Git Flow)을 따를 수 있습니다.

빌드 및 단위 테스트
커밋된 코드는 자동화 도구를 통해 빌드됩니다. 빌드 과정 중, 단위 테스트가 수행되어 코드의 기본적인 품질을 보증합니다.

통합 테스트 및 스테이징
빌드된 아티팩트는 다양한 테스트 환경에서 통합 테스트를 거칩니다. 이 후, 스테이징 환경에서 마지막 검증 과정을 거치게 됩니다.

3. CI/CD에서의 자동화 도구의 역할
버전 관리 시스템
주요 도구: Git, Mercurial
역할: 개발자들이 코드 변경사항을 추적하고 협업할 수 있게 합니다. 브랜치, 태그, 커밋 기록 등을 통해 코드의 이력을 관리합니다.
빌드 및 테스트 자동화 도구
주요 도구: Jenkins, Travis CI, CircleCI
역할: 소스 코드의 변경을 감지하면 자동으로 빌드 및 테스트를 수행합니다. 테스트 실패, 빌드 오류 등의 문제가 발생하면 개발자에게 알림을 전송합니다.